services:
  django:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    # restart: unless-stopped # Uncomment this line if you are using Docker in production
    volumes:
      - ./core/:/app/
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      celery:
        condition: service_started

  postgres:
    image: postgres:17
    restart: unless-stopped
    container_name: postgres
    env_file:
      - ./.env.dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  
  redis:
    image: redis:7.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: celery_worker
    restart: unless-stopped
    command: celery -A core.celery:app worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./.env.dev
    working_dir: /app
    volumes:
      - ./core/:/app/


  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    working_dir: /app
    env_file:
      - ./.env.dev
    volumes:
      - ./core/:/app/
    depends_on:
      redis:
        condition: service_healthy
      django:
        condition: service_started

    
  smtp4dev:
    image: rnwood/smtp4dev:v3
    restart: unless-stopped
    container_name: smtp4dev
    ports:
      - "5000:80"
      - "25:25"
      - "143:143"
    volumes:
      - smtp4dev-data:/smtp4dev

volumes:
  postgres-data:
  smtp4dev-data: