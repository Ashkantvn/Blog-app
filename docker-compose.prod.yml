services:
  django:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 30
    restart: unless-stopped
    env_file:
      - ./.env
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media

  postgres:
    image: postgres:17
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7.2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: celery_worker
    restart: unless-stopped
    command: celery -A core.celery:app worker --loglevel=info
    env_file:
      - ./.env
    depends_on:
      - redis
      - postgres
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M


  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: celery_beat
    restart: unless-stopped
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./.env
    depends_on:
      - django
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  nginx:
    image: nginx:1.29.2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/home/app/staticfiles:ro
      - media_volume:/home/app/media:ro
      # - ./nginx/certs:/etc/nginx/certs:ro   # put SSL certs here if using HTTPS
    depends_on:
      - django
    networks:
      - frontend
      - backend

volumes:
  postgres-data:
  static_volume:
  media_volume:

networks:
  frontend:
  backend: